name: 'Bump build version'
description: 'Bumps the build version'
author: 'Valispace'
branding:
  icon: 'help-circle'
  color: 'orange'
inputs:
  versioning-file:
    description: 'Path to the versioning file'
    required: true
    default: ''
  update-major-version:
    description: 'Update major version'
    required: false
    default: 'false'
  update-minor-version:
    description: 'Update minor version'
    required: false
    default: 'false'
  update-patch-version:
    description: 'Update patch version'
    required: false
    default: 'false'
  pre-release-metadata:
    description: 'Pre-release metadata (only `alpha-epoch`, `release-candidate-epoch` or `` are allowed)'
    required: false
    default: 'NaN'
runs:
  using: composite
  steps:
    - id: check-required-inputs
      run: |
        if [ "${{ inputs.versioning-file }}" == "" ]; then
          echo "::error title=${{ github.job }}::Path to the versioning file is required!" && exit 1
        fi
      shell: bash
    - id: check-pre-release-metadata-input
      run: |
        if [ "${{ inputs.pre-release-metadata }}" != "NaN" ]; then
          if [ "${{ inputs.pre-release-metadata }}" == "" ]; then
            exit 0
          elif [ $( echo "${{ inputs.pre-release-metadata }}" | grep --only-matching --perl-regexp "(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,})))?" ) != "" ]; then
            exit 0
          else
            echo "::error title=${{ github.job }}::Only 'alpha-epoch', 'release-candidate-epoch' or '' are allowed as pre-release metadata!" && exit 1
          fi
        fi
      shell: bash
    - id: setup-python
      if: ${{ (inputs.update-major-version == 'true') || (inputs.update-minor-version == 'true') || (inputs.update-patch-version == 'true') || (inputs.pre-release-metadata != 'NaN') }}
      uses: valispace/actions/setup-python@master
      with:
        python-version: '${{ env.PYTHON_VERSION }}'
        python-install-requirements: false
    - id: install-bump2version
      if: ${{ (inputs.update-major-version == 'true') || (inputs.update-minor-version == 'true') || (inputs.update-patch-version == 'true') || (inputs.pre-release-metadata != 'NaN') }}
      run: 'pip install --no-input --upgrade bump2version'
      shell: bash
    - id: update-major-version
      if: ${{ (inputs.update-major-version == 'true') }}
      run: 'bump2version --no-commit --no-tag --current-version "$( grep --perl-regexp "(?P<version>(version))" "${{ inputs.versioning-file }}" | grep --only-matching --perl-regexp "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" )" --parse "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" --serialize "{major}.{minor}.{patch}" major --allow-dirty "${{ inputs.versioning-file }}"'
      shell: bash
    - id: update-minor-version
      if: ${{ (inputs.update-minor-version == 'true') }}
      run: 'bump2version --no-commit --no-tag --current-version "$( grep --perl-regexp "(?P<version>(version))" "${{ inputs.versioning-file }}" | grep --only-matching --perl-regexp "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" )" --parse "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" --serialize "{major}.{minor}.{patch}" minor --allow-dirty "${{ inputs.versioning-file }}"'
      shell: bash
    - id: update-patch-version
      if: ${{ (inputs.update-patch-version == 'true') }}
      run: 'bump2version --no-commit --no-tag --current-version "$( grep --perl-regexp "(?P<version>(version))" "${{ inputs.versioning-file }}" | grep --only-matching --perl-regexp "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" )" --parse "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" --serialize "{major}.{minor}.{patch}" patch --allow-dirty "${{ inputs.versioning-file }}"'
      shell: bash
    - id: update-pre-release-metadata
      if: ${{ contains(inputs.pre-release-metadata, 'alpha') || contains(inputs.pre-release-metadata, 'release-candidate') }}
      run: 'bump2version --no-commit --no-tag --current-version "$( grep --perl-regexp "(?P<version>(version))" "${{ inputs.versioning-file }}" | grep --only-matching --perl-regexp "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" )" --parse "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" --serialize "{major}.{minor}.{patch}-{prereleasemetadata}" --new-version "$( grep --perl-regexp "(?P<version>(version))" "${{ inputs.versioning-file }}" | grep --only-matching --perl-regexp "(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*))\.(?P<patch>(0|[1-9][0-9]*))" )-${{ inputs.pre-release-metadata }}" prereleasemetadata --allow-dirty "${{ inputs.versioning-file }}"'
      shell: bash
    - id: update-release-metadata
      if: ${{ (inputs.pre-release-metadata == '') }}
      run: 'bump2version --no-commit --no-tag --current-version "$( grep --perl-regexp "(?P<version>(version))" "${{ inputs.versioning-file }}" | grep --only-matching --perl-regexp "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" )" --parse "(?P<version>(?P<release>(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*)))\.(?P<patch>(0|[1-9][0-9]*))(\-(?P<prereleasemetadata>(?P<prereleasetype>(alpha|release-candidate))\-(?P<epoch>([0-9]{10,}))))?)" --serialize "{major}.{minor}.{patch}" --new-version "$( grep --perl-regexp "(?P<version>(version))" "${{ inputs.versioning-file }}" | grep --only-matching --perl-regexp "(?P<major>(0|[1-9][0-9]*))\.(?P<minor>(0|[1-9][0-9]*))\.(?P<patch>(0|[1-9][0-9]*))" )" prereleasemetadata --allow-dirty "${{ inputs.versioning-file }}"'
      shell: bash
